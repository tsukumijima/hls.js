import { type InterstitialScheduleItem } from './interstitials-schedule';
import type Hls from '../hls';
import { type InterstitialAssetItem, type InterstitialEvent } from '../loader/interstitial-event';
import { HlsAssetPlayer } from './interstitial-player';
import { Logger } from '../utils/logger';
import type { NetworkComponentAPI } from '../types/component-api';
export interface InterstitialsManager {
    events: InterstitialEvent[];
    playerQueue: HlsAssetPlayer[];
    schedule: InterstitialScheduleItem[];
    bufferingPlayer: HlsAssetPlayer | null;
    bufferingAsset: InterstitialAssetItem | null;
    bufferingItem: InterstitialScheduleItem | null;
    bufferingIndex: number;
    playingAsset: InterstitialAssetItem | null;
    playingItem: InterstitialScheduleItem | null;
    playingIndex: number;
    waitingIndex: number;
    primary: PlayheadTimes;
    playout: PlayheadTimes;
    integrated: PlayheadTimes;
    skip: () => void;
}
export type PlayheadTimes = {
    bufferedEnd: number;
    currentTime: number;
    duration: number;
    seekableStart: number;
    seekTo: (time: number) => void;
};
export default class InterstitialsController extends Logger implements NetworkComponentAPI {
    private readonly HlsPlayerClass;
    private readonly hls;
    private readonly assetListLoader;
    private mediaSelection;
    private altSelection;
    private media;
    private detachedData;
    private requiredTracks;
    private manager;
    private playerQueue;
    private bufferedPos;
    private timelinePos;
    private schedule;
    private playingItem;
    private bufferingItem;
    private waitingItem;
    private playingAsset;
    private bufferingAsset;
    private shouldPlay;
    constructor(hls: Hls, HlsPlayerClass: typeof Hls);
    private registerListeners;
    private unregisterListeners;
    startLoad(): void;
    stopLoad(): void;
    resumeBuffering(): void;
    pauseBuffering(): void;
    destroy(): void;
    private onDestroying;
    private removeMediaListeners;
    private onMediaAttaching;
    private onMediaAttached;
    private clearScheduleState;
    private onMediaDetaching;
    get interstitialsManager(): InterstitialsManager | null;
    private get playingLastItem();
    private get playbackStarted();
    private get currentTime();
    private get primaryMedia();
    private isInterstitial;
    private retreiveMediaSource;
    private transferMediaFromPlayer;
    private transferMediaTo;
    private onPlay;
    private onSeeking;
    private onTimeupdate;
    private checkStart;
    private advanceAfterAssetEnded;
    private setScheduleToAssetAtTime;
    private setSchedulePosition;
    private get playbackDisabled();
    private get primaryDetails();
    private get primaryLive();
    private resumePrimary;
    private getPrimaryResumption;
    private isAssetBuffered;
    private attachPrimary;
    private onManifestLoading;
    private onLevelUpdated;
    private onAudioTrackUpdated;
    private onSubtitleTrackUpdated;
    private onAudioTrackSwitching;
    private onSubtitleTrackSwitch;
    private onBufferCodecs;
    private onBufferAppended;
    private onBufferFlushed;
    private onBufferedToEnd;
    private onMediaEnded;
    private onScheduleUpdate;
    private updateItem;
    private itemsMatch;
    private eventItemsMatch;
    private findItemIndex;
    private updateSchedule;
    private checkBuffer;
    private updateBufferedPos;
    private setBufferingItem;
    private bufferedToItem;
    private preloadPrimary;
    private bufferedToEvent;
    private preloadAssets;
    private flushFrontBuffer;
    private getAssetPlayerQueueIndex;
    private getAssetPlayer;
    private getBufferingPlayer;
    private createAsset;
    private createAssetPlayer;
    private clearInterstitial;
    private clearAssetPlayer;
    private emptyPlayerQueue;
    private startAssetPlayer;
    private bufferAssetPlayer;
    private handleAssetItemError;
    private primaryFallback;
    private onAssetListLoaded;
    private onError;
}
//# sourceMappingURL=interstitials-controller.d.ts.map